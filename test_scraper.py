#!/usr/bin/env python3
"""
Script de prueba para el scraper de empresas
Prueba la funcionalidad b√°sica con un c√≥digo postal
"""

import sys
import os
import pandas as pd
from datetime import datetime

def test_csv_loading():
    """Prueba la carga del archivo CSV"""
    print("üîç Probando carga del archivo CSV...")

    try:
        df = pd.read_csv("municipios_pedanias_codigos_postales_corregidos.csv")
        print(f"‚úÖ CSV cargado correctamente")
        print(f"   - Filas: {len(df)}")
        print(f"   - Columnas: {list(df.columns)}")
        print(f"   - C√≥digos postales √∫nicos: {len(df['codigo_postal'].unique())}")

        # Mostrar algunos c√≥digos postales
        codigos_muestra = df['codigo_postal'].unique()[:5]
        print(f"   - Muestra de c√≥digos: {list(codigos_muestra)}")

        return True, df

    except Exception as e:
        print(f"‚ùå Error al cargar CSV: {e}")
        return False, None

def test_dependencies():
    """Prueba que las dependencias est√©n instaladas"""
    print("\nüîç Probando dependencias...")

    dependencies = [
        ('pandas', 'pandas'),
        ('requests', 'requests'),
        ('bs4', 'beautifulsoup4'),
        ('selenium', 'selenium'),
        ('fake_useragent', 'fake-useragent'),
        ('openpyxl', 'openpyxl')
    ]

    missing = []
    for module, package in dependencies:
        try:
            __import__(module)
            print(f"‚úÖ {package}")
        except ImportError:
            print(f"‚ùå {package} - NO INSTALADO")
            missing.append(package)

    if missing:
        print(f"\n‚ö†Ô∏è  Dependencias faltantes: {missing}")
        print("   Ejecuta: pip install -r requirements.txt")
        return False
    else:
        print("‚úÖ Todas las dependencias est√°n instaladas")
        return True

def test_basic_scraper():
    """Prueba el scraper b√°sico con un c√≥digo postal"""
    print("\nüîç Probando scraper b√°sico...")

    try:
        from empresa_scraper import EmpresaScraper

        scraper = EmpresaScraper()

        # Probar con un c√≥digo postal
        codigo_test = "30180"  # Bullas

        print(f"   Probando con c√≥digo postal: {codigo_test}")

        # Probar b√∫squeda en Google
        resultados = scraper.buscar_en_google(codigo_test, 1)
        print(f"   - Resultados Google: {len(resultados)}")

        if resultados:
            print(f"   - Primer resultado: {resultados[0]['titulo'][:50]}...")

        return True

    except Exception as e:
        print(f"‚ùå Error en scraper b√°sico: {e}")
        return False

def test_advanced_scraper():
    """Prueba el scraper avanzado"""
    print("\nüîç Probando scraper avanzado...")

    try:
        from scraper_avanzado import ScraperAvanzado

        scraper = ScraperAvanzado()

        # Probar carga de c√≥digos postales
        codigos = scraper.cargar_codigos_postales("municipios_pedanias_codigos_postales_corregidos.csv")

        if len(codigos) > 0:
            print(f"   ‚úÖ C√≥digos cargados: {len(codigos)}")
            print(f"   - Muestra: {list(codigos[:3])}")
            return True
        else:
            print("   ‚ùå No se pudieron cargar c√≥digos postales")
            return False

    except Exception as e:
        print(f"‚ùå Error en scraper avanzado: {e}")
        return False

def test_config():
    """Prueba la configuraci√≥n"""
    print("\nüîç Probando configuraci√≥n...")

    try:
        from config import Config

        print(f"   ‚úÖ Configuraci√≥n cargada")
        print(f"   - Archivo CSV: {Config.ARCHIVO_CSV_ENTRADA}")
        print(f"   - Max c√≥digos: {Config.MAX_CODIGOS_POSTALES}")
        print(f"   - Max p√°ginas Google: {Config.MAX_PAGINAS_GOOGLE}")
        print(f"   - Fuentes habilitadas: {sum(Config.FUENTES_HABILITADAS.values())}")

        return True

    except Exception as e:
        print(f"‚ùå Error en configuraci√≥n: {e}")
        return False

def run_demo():
    """Ejecuta una demostraci√≥n con pocos c√≥digos postales"""
    print("\nüöÄ Ejecutando demostraci√≥n...")

    try:
        from scraper_avanzado import ScraperAvanzado

        scraper = ScraperAvanzado()

        # Ejecutar con solo 1 c√≥digo postal para prueba
        empresas = scraper.ejecutar_busqueda_avanzada(
            "municipios_pedanias_codigos_postales_corregidos.csv",
            max_codigos=1
        )

        print(f"   ‚úÖ Demostraci√≥n completada")
        print(f"   - Empresas encontradas: {len(empresas)}")

        if empresas:
            print(f"   - Primera empresa: {empresas[0]['razon_social']}")

        # Guardar resultados de prueba
        scraper.guardar_resultados_avanzados("demo_empresas.xlsx")

        return True

    except Exception as e:
        print(f"‚ùå Error en demostraci√≥n: {e}")
        return False

def main():
    """Funci√≥n principal de pruebas"""
    print("üß™ INICIANDO PRUEBAS DEL SCRAPER DE EMPRESAS")
    print("=" * 50)

    tests = [
        ("Carga CSV", test_csv_loading),
        ("Dependencias", test_dependencies),
        ("Configuraci√≥n", test_config),
        ("Scraper B√°sico", test_basic_scraper),
        ("Scraper Avanzado", test_advanced_scraper),
    ]

    results = []

    for test_name, test_func in tests:
        try:
            result = test_func()
            results.append((test_name, result))
        except Exception as e:
            print(f"‚ùå Error inesperado en {test_name}: {e}")
            results.append((test_name, False))

    # Resumen
    print("\n" + "=" * 50)
    print("üìä RESUMEN DE PRUEBAS")
    print("=" * 50)

    passed = 0
    for test_name, result in results:
        status = "‚úÖ PAS√ì" if result else "‚ùå FALL√ì"
        print(f"{test_name:20} {status}")
        if result:
            passed += 1

    print(f"\nTotal: {passed}/{len(results)} pruebas pasaron")

    if passed == len(results):
        print("\nüéâ ¬°Todas las pruebas pasaron! El scraper est√° listo para usar.")

        # Preguntar si ejecutar demo
        try:
            response = input("\n¬øEjecutar demostraci√≥n? (s/n): ").lower()
            if response in ['s', 'si', 's√≠', 'y', 'yes']:
                run_demo()
        except KeyboardInterrupt:
            print("\nDemo cancelada por el usuario")
    else:
        print("\n‚ö†Ô∏è  Algunas pruebas fallaron. Revisa los errores arriba.")
        print("   Aseg√∫rate de instalar todas las dependencias:")
        print("   pip install -r requirements.txt")

if __name__ == "__main__":
    main()

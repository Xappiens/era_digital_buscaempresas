#!/usr/bin/env python3
"""
Script de instalaci√≥n para el scraper de empresas
Instala dependencias y configura el entorno
"""

import subprocess
import sys
import os
import platform

def print_header():
    """Imprime el encabezado del instalador"""
    print("=" * 60)
    print("üöÄ INSTALADOR DEL SCRAPER DE EMPRESAS - REGI√ìN DE MURCIA")
    print("=" * 60)
    print()

def check_python_version():
    """Verifica la versi√≥n de Python"""
    print("üîç Verificando versi√≥n de Python...")

    version = sys.version_info
    if version.major < 3 or (version.major == 3 and version.minor < 7):
        print(f"‚ùå Python {version.major}.{version.minor} detectado")
        print("   Se requiere Python 3.7 o superior")
        return False
    else:
        print(f"‚úÖ Python {version.major}.{version.minor}.{version.micro} detectado")
        return True

def install_pip():
    """Instala o actualiza pip"""
    print("\nüîç Verificando pip...")

    try:
        import pip
        print("‚úÖ pip est√° disponible")
        return True
    except ImportError:
        print("‚ùå pip no est√° disponible")
        print("   Instalando pip...")

        try:
            # Descargar get-pip.py
            import urllib.request
            url = "https://bootstrap.pypa.io/get-pip.py"
            urllib.request.urlretrieve(url, "get-pip.py")

            # Instalar pip
            subprocess.check_call([sys.executable, "get-pip.py"])

            # Limpiar archivo temporal
            os.remove("get-pip.py")

            print("‚úÖ pip instalado correctamente")
            return True

        except Exception as e:
            print(f"‚ùå Error al instalar pip: {e}")
            return False

def install_dependencies():
    """Instala las dependencias del proyecto"""
    print("\nüîç Instalando dependencias...")

    # Intentar instalar desde requirements.txt primero
    if os.path.exists('requirements.txt'):
        try:
            print("   Instalando desde requirements.txt...")
            subprocess.check_call([
                sys.executable, "-m", "pip", "install", "-r", "requirements.txt"
            ], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
            print("   ‚úÖ Dependencias instaladas desde requirements.txt")
            return True
        except subprocess.CalledProcessError:
            print("   ‚ö†Ô∏è  Error al instalar desde requirements.txt, intentando individualmente...")

    # Lista de dependencias como fallback
    dependencies = [
        'pandas',
        'requests',
        'beautifulsoup4',
        'selenium',
        'fake-useragent',
        'webdriver-manager',
        'openpyxl'
    ]

    failed = []

    for dep in dependencies:
        try:
            print(f"   Instalando {dep}...")
            subprocess.check_call([
                sys.executable, "-m", "pip", "install", dep
            ], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
            print(f"   ‚úÖ {dep} instalado")
        except subprocess.CalledProcessError:
            print(f"   ‚ùå Error al instalar {dep}")
            failed.append(dep)

    if failed:
        print(f"\n‚ö†Ô∏è  Fallaron {len(failed)} dependencias: {failed}")
        return False
    else:
        print("\n‚úÖ Todas las dependencias instaladas correctamente")
        return True

def check_csv_file():
    """Verifica que el archivo CSV est√© presente"""
    print("\nüîç Verificando archivo CSV...")

    csv_file = "municipios_pedanias_codigos_postales_corregidos.csv"

    if os.path.exists(csv_file):
        print(f"‚úÖ Archivo {csv_file} encontrado")

        # Verificar que sea un CSV v√°lido
        try:
            import pandas as pd
            df = pd.read_csv(csv_file)
            print(f"   - Filas: {len(df)}")
            print(f"   - Columnas: {list(df.columns)}")
            print(f"   - C√≥digos postales √∫nicos: {len(df['codigo_postal'].unique())}")
            return True
        except Exception as e:
            print(f"‚ùå Error al leer CSV: {e}")
            return False
    else:
        print(f"‚ùå Archivo {csv_file} no encontrado")
        print("   Aseg√∫rate de que el archivo est√© en el directorio actual")
        return False

def create_sample_config():
    """Crea un archivo de configuraci√≥n de ejemplo"""
    print("\nüîç Creando configuraci√≥n de ejemplo...")

    config_content = '''# Configuraci√≥n del scraper de empresas
# Modifica estos valores seg√∫n tus necesidades

# N√∫mero m√°ximo de c√≥digos postales a procesar (None = todos)
MAX_CODIGOS_POSTALES = 5

# N√∫mero m√°ximo de p√°ginas a buscar en Google
MAX_PAGINAS_GOOGLE = 3

# Pausas entre operaciones (segundos)
PAUSA_ENTRE_CODIGOS = (3, 7)
PAUSA_ENTRE_PAGINAS = (2, 5)

# Fuentes habilitadas
FUENTES_HABILITADAS = {
    'google': True,
    'paginas_amarillas': True,
    'einforma': True,
    'axesor': True,
    'infoempresas': True,
    'redes_sociales': False
}
'''

    try:
        with open('config_ejemplo.py', 'w', encoding='utf-8') as f:
            f.write(config_content)
        print("‚úÖ Archivo config_ejemplo.py creado")
        return True
    except Exception as e:
        print(f"‚ùå Error al crear configuraci√≥n: {e}")
        return False

def run_test():
    """Ejecuta una prueba b√°sica"""
    print("\nüîç Ejecutando prueba b√°sica...")

    try:
        # Importar m√≥dulos principales
        import pandas as pd
        import requests
        from bs4 import BeautifulSoup

        print("‚úÖ M√≥dulos principales importados correctamente")

        # Probar request b√°sico
        response = requests.get("https://httpbin.org/get", timeout=10)
        if response.status_code == 200:
            print("‚úÖ Conexi√≥n a internet funcionando")
        else:
            print("‚ùå Problema con conexi√≥n a internet")
            return False

        return True

    except Exception as e:
        print(f"‚ùå Error en prueba b√°sica: {e}")
        return False

def show_next_steps():
    """Muestra los pr√≥ximos pasos"""
    print("\n" + "=" * 60)
    print("üéâ INSTALACI√ìN COMPLETADA")
    print("=" * 60)
    print()
    print("Pr√≥ximos pasos:")
    print()
    print("1. üîß Configurar par√°metros:")
    print("   - Edita config.py para ajustar la configuraci√≥n")
    print("   - O usa config_ejemplo.py como referencia")
    print()
    print("2. üß™ Ejecutar pruebas:")
    print("   python test_scraper.py")
    print()
    print("3. üöÄ Ejecutar scraper b√°sico:")
    print("   python empresa_scraper.py")
    print()
    print("4. üöÄ Ejecutar scraper avanzado:")
    print("   python scraper_avanzado.py")
    print()
    print("5. üìñ Leer documentaci√≥n:")
    print("   Consulta README.md para m√°s detalles")
    print()
    print("‚ö†Ô∏è  IMPORTANTE:")
    print("   - Respeta los t√©rminos de servicio de las webs")
    print("   - No sobrecargues los servidores")
    print("   - Usa la informaci√≥n de manera √©tica y legal")
    print()

def main():
    """Funci√≥n principal del instalador"""
    print_header()

    # Verificar Python
    if not check_python_version():
        print("\n‚ùå Instalaci√≥n cancelada: Python 3.7+ requerido")
        return False

    # Instalar pip si es necesario
    if not install_pip():
        print("\n‚ùå Instalaci√≥n cancelada: No se pudo instalar pip")
        return False

    # Instalar dependencias
    if not install_dependencies():
        print("\n‚ö†Ô∏è  Algunas dependencias fallaron, pero puedes continuar")

    # Verificar archivo CSV
    if not check_csv_file():
        print("\n‚ö†Ô∏è  Archivo CSV no encontrado, pero puedes continuar")

    # Crear configuraci√≥n de ejemplo
    create_sample_config()

    # Ejecutar prueba b√°sica
    if run_test():
        print("‚úÖ Prueba b√°sica exitosa")
    else:
        print("‚ö†Ô∏è  Prueba b√°sica fall√≥, pero puedes continuar")

    # Mostrar pr√≥ximos pasos
    show_next_steps()

    return True

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n\n‚ùå Instalaci√≥n cancelada por el usuario")
    except Exception as e:
        print(f"\n‚ùå Error inesperado: {e}")
        print("   Intenta ejecutar: pip install -r requirements.txt")
